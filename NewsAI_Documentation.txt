# NewsAI Documentation: Complete Technical Overview

## Table of Contents

1. [Introduction](#introduction)
2. [Architecture Overview](#architecture-overview)
3. [Frontend Implementation](#frontend-implementation)
   - [Next.js Framework](#nextjs-framework)
   - [UI Components](#ui-components)
   - [State Management](#state-management)
   - [Data Fetching](#data-fetching)
   - [Routing](#routing)
4. [Backend Implementation](#backend-implementation)
   - [FastAPI Framework](#fastapi-framework)
   - [API Endpoints](#api-endpoints)
   - [RSS Feed Processing](#rss-feed-processing)
   - [Caching Mechanism](#caching-mechanism)
5. [Advanced Algorithms](#advanced-algorithms)
   - [Divide and Conquer Implementation](#divide-and-conquer-implementation)
   - [Sentiment Analysis](#sentiment-analysis)
   - [Semantic Search](#semantic-search)
6. [Authentication](#authentication)
7. [Performance Optimizations](#performance-optimizations)
8. [Deployment](#deployment)
9. [Configuration](#configuration)

---

## 1. Introduction

NewsAI is a sophisticated news aggregation platform that leverages artificial intelligence to collect, analyze, and present news articles from various sources. The application provides a multilingual interface, allowing users to search for news in different languages, filter by category, and view trending news with sentiment analysis.

Key features include:
- Multilingual news search and aggregation
- Category-based news browsing
- Trending news analysis with sentiment indicators
- Source filtering and preference management
- Advanced search with semantic understanding

The application uses Next.js for the frontend and FastAPI with Python for the backend, integrating Google's Gemini 1.5 Flash for AI-powered features.

---

## 2. Architecture Overview

NewsAI follows a modern client-server architecture:

**Frontend:**
- Next.js (React framework) for UI rendering and client-side functionality
- TailwindCSS for styling
- Shadcn/UI component library for consistent design
- React Hooks for state management
- Framer Motion for animations

**Backend:**
- FastAPI (Python) for backend API services
- RSS feed parsing for news collection
- Google Gemini 1.5 Flash API integration for AI features
- In-memory caching for performance optimization

**Communication:**
- RESTful API endpoints
- JSON data interchange
- Fetch API with retry mechanisms

**Infrastructure:**
- Vercel for frontend hosting
- Render for backend hosting

---

## 3. Frontend Implementation

### Next.js Framework

The frontend is built with Next.js, a React framework that provides server-side rendering, static site generation, and client-side navigation.

**File Structure:**
- `/app`: Contains page components and API route handlers
- `/components`: Reusable UI components
- `/lib`: Utility functions
- `/hooks`: Custom React hooks

### UI Components

The UI is built using a combination of Shadcn/UI components and custom components. Key components include:

**Page Layout (`app/layout.tsx`):**
- Defines the basic layout structure for all pages
- Includes global styles and metadata

**News Query Page (`app/page.tsx`):**
- Main page component with search functionality
- Displays news articles and trending news
- Handles user interactions for filtering and pagination

**Card Components:**
- `ArticleCard`: Displays individual news articles
- `TrendingNewsCard`: Special card for trending news with sentiment indicators

**UI Elements:**
- Form components for search and filtering
- Pagination controls
- Loading indicators
- Error messages

### State Management

The application uses React's built-in state management with the `useState` and `useEffect` hooks:

```tsx
// Main state variables
const [articles, setArticles] = useState<NewsArticle[]>([]);
const [trendingArticles, setTrendingArticles] = useState<TrendingNewsArticle[]>([]);
const [loading, setLoading] = useState<boolean>(false);
const [currentPage, setCurrentPage] = useState<number>(1);
```

Form state is managed using `react-hook-form` with Zod validation:

```tsx
const form = useForm<z.infer<typeof formSchema>>({
  resolver: zodResolver(formSchema),
  defaultValues: {
    query: "",
    language: "en",
    preferred_sources: [],
    date_range: "all",
    results_per_page: "20",
  },
});
```

### Data Fetching

The application fetches data from the backend API using custom fetch functions with retry capabilities:

```tsx
// Fetch trending news
const fetchTrendingNews = async () => {
  setTrendingLoading(true);
  try {
    const language = form.getValues("language");
    const response = await fetchWithRetry(`/api/trending?language=${language}&limit=12`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    }, 3, 2000, 60000);
    
    // Process response...
  } catch (err) {
    // Handle errors...
  } finally {
    setTrendingLoading(false);
  }
};
```

The `fetchWithRetry` utility automatically retries failed requests:

```tsx
// In lib/fetch-with-retry.ts
export async function fetchWithRetry(
  url: string,
  options: RequestInit = {},
  maxRetries = 3,
  retryDelay = 1000,
  timeout = 30000
) {
  // Implementation with AbortController for timeouts and retry logic
}
```

### Routing

Next.js handles routing automatically based on the file structure. Additional routes include:

- `/login`: User authentication page
- `/api/news`: API route for fetching news
- `/api/trending`: API route for trending news

---

## 4. Backend Implementation

### FastAPI Framework

The backend is built with FastAPI, a modern, high-performance web framework for building APIs with Python:

```python
from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel
import feedparser
# Other imports...

app = FastAPI()

# CORS middleware setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
```

### API Endpoints

The backend exposes several RESTful endpoints:

**News Search Endpoint:**
```python
@app.post("/api/news", response_model=NewsResponse)
async def get_news(request: NewsRequest):
    # Implementation...
```

**Trending News Endpoint:**
```python
@app.get("/api/trending")
async def get_trending_news(language: str = "en", limit: int = 10):
    # Implementation...
```

**Source Listing Endpoint:**
```python
@app.get("/api/news/sources/{language}")
def get_news_sources(language: str):
    # Implementation...
```

### RSS Feed Processing

The backend fetches news articles from various RSS feeds using the `feedparser` library:

```python
def fetch_rss_feed(feed_url, category=None, max_retries=2):
    """Fetch articles from a single RSS feed with retry logic"""
    tries = 0
    while tries < max_retries:
        try:
            feed = feedparser.parse(feed_url)
            
            # Process feed entries...
            
            return articles
        except Exception as e:
            tries += 1
            if tries >= max_retries:
                print(f"Failed to fetch {feed_url} after {max_retries} attempts: {e}")
                return []
            time.sleep(1)  # Wait before retrying
```

For efficient processing of multiple feeds, concurrent execution is used:

```python
def fetch_all_feeds(feed_urls, category=None, max_workers=16):
    """Fetch articles from multiple RSS feeds concurrently"""
    start_time = time.time()
    all_articles = []
    
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_url = {executor.submit(fetch_rss_feed, url, category): url for url in feed_urls}
        for future in as_completed(future_to_url):
            # Process results...
    
    # Deduplication and processing...
    
    return result_articles
```

### Caching Mechanism

To improve performance, the backend implements an in-memory caching system:

```python
# News cache store
NEWS_CACHE = {}
CACHE_EXPIRY = 1800  # 30 minutes in seconds

# Cache check in API endpoints
cache_key = f"{language}-{category or 'all'}-{query[:30]}-{'-'.join(sorted(preferred_sources))}"
current_time = time.time()

if cache_key in NEWS_CACHE and (current_time - NEWS_CACHE[cache_key]["timestamp"] < CACHE_EXPIRY):
    cached_data = NEWS_CACHE[cache_key]
    # Return cached data...
```

---

## 5. Advanced Algorithms

### Divide and Conquer Implementation

The trending news feature uses a divide and conquer approach to efficiently process news articles from multiple categories:

```python
@app.get("/api/trending")
async def get_trending_news(language: str = "en", limit: int = 10):
    try:
        # Cache check...
        
        # Step 1: Divide - Split categories into groups for parallel processing
        trending_categories = ["News", "Tech", "Business & Economy", "Sports", "Science", "Entertainment"]
        
        # Create category groups for balanced workload
        category_groups = [
            ["News", "Business & Economy"],
            ["Tech", "Science"],
            ["Sports", "Entertainment"]
        ]
        
        # Step 2: Conquer - Process each category group concurrently
        async def process_category_group(categories):
            group_articles = []
            for category in categories:
                if category in RSS_FEEDS and language in RSS_FEEDS[category]:
                    feeds = RSS_FEEDS[category][language]
                    # Get a subset of feeds for faster response
                    selected_feeds = feeds[:min(5, len(feeds))]
                    articles = fetch_all_feeds(selected_feeds, category=category)
                    # Sort by date and take the most recent
                    articles.sort(key=lambda x: x.get("published_date", ""), reverse=True)
                    group_articles.extend(articles[:10])  # Take top 10 from each category
            return group_articles
        
        # Process groups concurrently
        tasks = [process_category_group(group) for group in category_groups]
        group_results = await asyncio.gather(*tasks)
        
        # Step 3: Combine - Merge results from all groups
        all_articles = []
        for group_articles in group_results:
            all_articles.extend(group_articles)
        
        # Deduplication and sorting...
        
        # Sentiment analysis using Gemini
        # Processing and response...
    except Exception as e:
        # Error handling...
```

This divide and conquer approach:
1. **Divides** the problem (fetching news from different categories) into smaller sub-problems
2. **Conquers** each sub-problem concurrently (processing each category group in parallel)
3. **Combines** the results into a final solution (merging and ranking the articles)

The benefits include:
- Improved performance through parallel processing
- Better resource utilization
- More responsive user experience
- Scalability for adding more categories

### Sentiment Analysis

Sentiment analysis is performed using Google's Gemini 1.5 Flash model:

```python
async def analyze_sentiment(article):
    try:
        # Combine title and summary for analysis
        content = f"{article['title']}. {article['summary']}"
        
        prompt = f"""Analyze the sentiment of this news article text. 
        Respond with a JSON object containing:
        1. score (float between -1 and 1, where -1 is very negative, 0 is neutral, 1 is very positive)
        2. magnitude (float between 0 and 1 indicating strength of sentiment)
        3. label (one of: "positive", "negative", "neutral", "mixed")
        
        News text: "{content}"
        
        JSON response:"""
        
        response = model.generate_content(prompt)
        
        # Parse JSON from response
        sentiment_data = json.loads(response.text)
        article["sentiment"] = sentiment_data
    except Exception as e:
        print(f"Error analyzing sentiment: {e}")
```

The frontend displays sentiment visually using color coding and emoji indicators:

```tsx
function SentimentIndicator({ sentiment }: { sentiment?: SentimentInfo }) {
  if (!sentiment) return null;
  
  const getSentimentColor = (label: string, score: number) => {
    if (label === "positive") return "text-green-500";
    if (label === "negative") return "text-red-500";
    if (label === "mixed") return "text-amber-500";
    return "text-gray-500"; // neutral
  };
  
  const getSentimentIcon = (label: string) => {
    if (label === "positive") return "😊";
    if (label === "negative") return "😞";
    if (label === "mixed") return "😐";
    return "🔍"; // neutral
  };
  
  return (
    <div className={`flex items-center gap-1 text-xs ${getSentimentColor(sentiment.label, sentiment.score)}`}>
      <span>{getSentimentIcon(sentiment.label)}</span>
      <span className="capitalize">{sentiment.label}</span>
    </div>
  );
}
```

### Semantic Search

The application uses two search approaches:

1. **Gemini Enhanced Search:** Uses Google Gemini for semantic understanding

```python
def gemini_enhanced_search(articles, query):
    try:
        # Generate embedding for query using Gemini
        query_embedding = model.embed_content(query).embedding
        
        # Process each article with semantic similarity
        for article in articles:
            content = article["title"] + ". " + article["summary"]
            article_embedding = model.embed_content(content).embedding
            similarity = calculate_cosine_similarity(query_embedding, article_embedding)
            article["relevance"] = float(similarity)
    except Exception:
        # Fallback to advanced search...
```

2. **Advanced Semantic Search:** A fallback method with custom scoring

```python
def advanced_semantic_search(articles, query, threshold=0.03):
    """
    Supercharged search function that intelligently balances speed with comprehensive results
    """
    # Preprocessing
    query_lower = query.lower()
    query_terms = re.sub(r'\W+', ' ', query_lower).strip().split()
    
    # Score each article
    scored_articles = []
    for article in articles:
        title_lower = article["title"].lower()
        summary_lower = article["summary"].lower() if article.get("summary") else ""
        article_text = title_lower + " " + summary_lower
        
        # Calculate scores based on various signals
        # ...
        
        if score > threshold:
            article["relevance"] = score
            scored_articles.append(article)
    
    # Return sorted results
    scored_articles.sort(key=lambda x: x.get("relevance", 0), reverse=True)
    return scored_articles, len(scored_articles)
```

---

## 6. Authentication

The application implements a simple client-side authentication system:

```tsx
// Check if user is logged in
useEffect(() => {
  const isLoggedIn = localStorage.getItem('isLoggedIn');
  if (!isLoggedIn) {
    router.push('/login');
  } else {
    // Also set a cookie for middleware authentication
    document.cookie = `isLoggedIn=true; path=/; max-age=86400`; // 24 hours
  }
}, [router]);

// Logout function
const handleLogout = () => {
  localStorage.removeItem('isLoggedIn');
  localStorage.removeItem('userEmail');
  localStorage.removeItem('loginTime');
  
  // Clear the cookie as well
  document.cookie = 'isLoggedIn=; path=/; max-age=0';
  
  router.push('/login');
};
```

---

## 7. Performance Optimizations

The application implements several performance optimizations:

**Frontend Optimizations:**
- Lazy loading of images
- Pagination of results
- Skeleton loaders for better perceived performance
- Debouncing for search inputs
- React's `AnimatePresence` for smooth transitions

**Backend Optimizations:**
- In-memory caching with expiration
- Concurrent processing using ThreadPoolExecutor
- Task batching for API calls to avoid rate limits
- Efficient deduplication algorithms
- Response compression

**Network Optimizations:**
- Retry mechanism for failed requests
- AbortController for request timeouts
- Server warm-up ping to keep backend active

---

## 8. Deployment

**Frontend Deployment:**
- Hosted on Vercel
- Environment variables for API URLs
- Static site generation for improved performance

**Backend Deployment:**
- Hosted on Render
- Environment variables for API keys and configuration
- Automatic scaling based on demand

---

## 9. Configuration

**Environment Variables:**
- `NEXT_PUBLIC_API_URL`: Backend API URL
- `GEMINI_API_KEY`: Google Gemini API key
- `NEWS_API_KEY`: NewsAPI.org API key (fallback)

**RSS Feed Configuration:**
The application has an extensive list of RSS feeds organized by category and language:

```python
RSS_FEEDS = {
    "News": {
        "en": [
            "https://www.bbc.co.uk/news/world/rss.xml",
            "https://rss.nytimes.com/services/xml/rss/nyt/World.xml",
            # More feeds...
        ],
        "hi": [
            "https://www.bhaskar.com/rss-feed/1061/",
            # More feeds...
        ],
        # More languages...
    },
    # More categories...
}
```

**News Source Names:**
For better display, the application maps domain names to readable source names:

```python
NEWS_SOURCE_NAMES = {
    "bbci.co.uk": "BBC News",
    "nytimes.com": "The New York Times",
    # More mappings...
}
